#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import JavaScriptObfuscator from 'javascript-obfuscator';

const [,, buildDir] = process.argv;

if (!buildDir) {
	console.error('Usage: node obfuscate-html-inline.js <build-directory>');
	process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
function findHtmlFiles(dir) {
	const htmlFiles = [];

	// 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	const rootFiles = fs.readdirSync(dir, { withFileTypes: true });
	rootFiles.forEach(file => {
		if (file.isFile() && file.name.endsWith('.html')) {
			htmlFiles.push(path.join(dir, file.name));
		}
	});

	// 2. –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–ª–æ–≥–∏—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
	const subdirs = rootFiles
		.filter(file => file.isDirectory())
		.map(file => file.name)
		.sort(); // –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫

	subdirs.forEach(subdir => {
		const subdirPath = path.join(dir, subdir);
		const subdirFiles = fs.readdirSync(subdirPath, { withFileTypes: true });

		subdirFiles.forEach(file => {
			if (file.isFile() && file.name.endsWith('.html')) {
				htmlFiles.push(path.join(subdirPath, file.name));
			}
		});
	});

	return htmlFiles;
}

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
const htmlFiles = findHtmlFiles(buildDir);

if (htmlFiles.length === 0) {
	console.log('‚ö†Ô∏è  HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤', buildDir);
	process.exit(0);
}

console.log(`üîç –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π HTML —Ñ–∞–π–ª
htmlFiles.forEach(htmlPath => {
	try {
		let html = fs.readFileSync(htmlPath, 'utf8');
		const originalHtml = html;

		// –û–±—Ñ—É—Å—Ü–∏—Ä—É–µ–º inline —Å–∫—Ä–∏–ø—Ç—ã
		html = html.replace(
			/<script(?![^>]*application\/ld\+json)[^>]*>([\s\S]*?)<\/script>/gi,
			(match, code) => {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
				if (!code.trim()) return match;

				try {
					const obf = JavaScriptObfuscator
						.obfuscate(code, {
							compact: true,
							controlFlowFlattening: true,
							stringArray: true,
							stringArrayThreshold: 0.75
						})
						.getObfuscatedCode();
					return `<script>${obf}</script>`;
				} catch (error) {
					console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –≤ ${path.relative(buildDir, htmlPath)}:`, error.message);
					return match; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
				}
			}
		);

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
		if (html !== originalHtml) {
			fs.writeFileSync(htmlPath, html, 'utf8');
			console.log(`‚úÖ –û–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω: ${path.relative(buildDir, htmlPath)}`);
		} else {
			console.log(`‚ÑπÔ∏è  –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç inline-—Å–∫—Ä–∏–ø—Ç–æ–≤): ${path.relative(buildDir, htmlPath)}`);
		}

	} catch (error) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${path.relative(buildDir, htmlPath)}:`, error.message);
	}
});

console.log('üéâ –û–±—Ñ—É—Å–∫–∞—Ü–∏—è inline-—Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');