import fs from 'fs';
import path from 'path';
import { globSync } from 'glob';
import { minify } from 'html-minifier-terser';
import JavaScriptObfuscator from 'javascript-obfuscator';
import CleanCSS from 'clean-css';

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª—ã —Å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ–º CSS –∏ JS
 */
export class HtmlProcessor {
  constructor(options = {}) {
    this.options = {
      inlineCss: false,
      inlineJs: false,
      inlineAll: false,
      assetInlineLimit: 8192,
      generateIndex: false,
      skipObfuscationFor: [],
      ...options,
    };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª
   */
  async processHtml(htmlPath, buildDir) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML: ${htmlPath}`);

    const htmlContent = fs.readFileSync(htmlPath, 'utf8');
    let processedHtml = htmlContent;

    // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º CSS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.options.inlineCss || this.options.inlineAll) {
      processedHtml = await this.inlineCss(processedHtml, path.dirname(htmlPath));
    }

    // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º JS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.options.inlineJs || this.options.inlineAll) {
      processedHtml = await this.inlineJs(processedHtml, path.dirname(htmlPath));
    }

    // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º HTML
    processedHtml = await this.minifyHtml(processedHtml);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputPath = path.join(buildDir, 'base.html');
    fs.writeFileSync(outputPath, processedHtml);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω base.html —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏`);

    return outputPath;
  }

  /**
   * –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç CSS —Ñ–∞–π–ª—ã –≤ HTML
   */
  async inlineCss(html, baseDir) {
    const cssRegex = /<link[^>]+rel=["']stylesheet["'][^>]*href=["']([^"']+)["'][^>]*>/g;
    let processedHtml = html;

    let match;
    while ((match = cssRegex.exec(html)) !== null) {
      const cssPath = path.resolve(baseDir, match[1]);

      if (fs.existsSync(cssPath)) {
        const cssContent = fs.readFileSync(cssPath, 'utf8');
        const minifiedCss = new CleanCSS().minify(cssContent).styles;

        // –ó–∞–º–µ–Ω—è–µ–º link –Ω–∞ style
        const styleTag = `<style>${minifiedCss}</style>`;
        processedHtml = processedHtml.replace(match[0], styleTag);

        console.log(`  üì¶ –í—Å—Ç—Ä–æ–µ–Ω CSS: ${match[1]}`);
      } else {
        console.log(`  ‚ö†Ô∏è CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cssPath}`);
      }
    }

    return processedHtml;
  }

  /**
   * –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç JS —Ñ–∞–π–ª—ã –≤ HTML
   */
  async inlineJs(html, baseDir) {
    const jsRegex = /<script[^>]+src=["']([^"']+)["'][^>]*><\/script>/g;
    let processedHtml = html;

    let match;
    while ((match = jsRegex.exec(html)) !== null) {
      const jsPath = path.resolve(baseDir, match[1]);

      if (fs.existsSync(jsPath)) {
        const jsContent = fs.readFileSync(jsPath, 'utf8');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞—Ç—å
        const shouldObfuscate = !this.options.skipObfuscation && !this.shouldSkipObfuscation(match[1]);
        const processedJs = shouldObfuscate ? JavaScriptObfuscator.obfuscate(jsContent, this.getObfuscatorConfig()).getObfuscatedCode() : jsContent;

        // –ó–∞–º–µ–Ω—è–µ–º script src –Ω–∞ inline —Å –ø–æ–ª–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const escapedJs = this.escapeHtmlEntities(processedJs);
        const scriptTag = `<script>${escapedJs}</script>`;
        processedHtml = processedHtml.replace(match[0], scriptTag);

        console.log(`  üì¶ –í—Å—Ç—Ä–æ–µ–Ω JS: ${match[1]} ${shouldObfuscate ? '(–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω)' : ''}`);
      } else {
        console.log(`  ‚ö†Ô∏è JS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${jsPath}`);
      }
    }

    return processedHtml;
  }

  /**
   * –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç HTML
   */
  async minifyHtml(html) {
    return await minify(html, {
      collapseWhitespace: true,
      removeComments: true,
      removeRedundantAttributes: true,
      removeEmptyAttributes: true,
      minifyCSS: true,
      minifyJS: false, // JS —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é
   */
  shouldSkipObfuscation(filePath) {
    return this.options.skipObfuscationFor.some(skip => filePath.includes(skip));
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –≤ JavaScript –∫–æ–¥–µ
   * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
   */
  escapeHtmlEntities(jsCode) {
    // –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –≤ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ
    let escaped = jsCode
      .replace(/&amp;/g, '&amp;amp;')  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &amp;
      .replace(/&lt;/g, '&amp;lt;')    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &lt;
      .replace(/&gt;/g, '&amp;gt;')    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &gt;
      .replace(/&quot;/g, '&amp;quot;') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &quot;
      .replace(/&#39;/g, '&amp;#39;')   // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#39;
      .replace(/&#x27;/g, '&amp;#x27;') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#x27;
      .replace(/&#x2F;/g, '&amp;#x2F;') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#x2F;
      .replace(/&#x60;/g, '&amp;#x60;') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#x60;
      .replace(/&#x3D;/g, '&amp;#x3D;') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#x3D;
      .replace(/&#x3C;/g, '&amp;#x3C;') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#x3C;
      .replace(/&#x3E;/g, '&amp;#x3E;'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &#x3E;

    // –ó–∞—Ç–µ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    escaped = escaped
      .replace(/&/g, '&amp;')          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è &
      .replace(/</g, '&lt;')           // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º <
      .replace(/>/g, '&gt;')           // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º >
      .replace(/"/g, '&quot;')         // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º "
      .replace(/'/g, '&#39;');         // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º '

    return escaped;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞
   */
  getObfuscatorConfig() {
    try {
      const configPath = path.join(process.cwd(), 'obfuscator.json');
      if (fs.existsSync(configPath)) {
        return JSON.parse(fs.readFileSync(configPath, 'utf8'));
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å obfuscator.json, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }

    return {
      compact: true,
      controlFlowFlattening: true,
      controlFlowFlatteningThreshold: 1,
      deadCodeInjection: true,
      deadCodeInjectionThreshold: 0.8,
      stringArrayEncoding: ['base64'],
      selfDefending: true,
      renameGlobals: true,
      transformObjectKeys: true,
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç index.html –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
   */
  generateIndexHtml(buildDir) {
    const indexPath = path.join(buildDir, 'index.html');

    if (!fs.existsSync(indexPath)) {
      const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Built with obf-minify-build</title>
</head>
<body>
    <h1>Welcome to Your Project</h1>
    <p>This project was built with obf-minify-build.</p>
    <p>Add your content to the src/ directory and rebuild.</p>
</body>
</html>`;

      fs.writeFileSync(indexPath, htmlContent);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω index.html');
    }
  }
}
